React JS

   React js is a javascript library used for builiding user interfaces(single page applications)
  
   https://reactjs.org/
   
   what are the advantages of React JS?

   -> Easy to write code and light weight 
   -> Reusable Component based
      Ex: Ecommerce application : end user , Agents, Students 
          Login Component 
          generic componnet login can be re-used for all type of users -- reusable 
   -> Design simple views for your application 
   -> Not too hard to learn 
   -> React makes it painless to creat interactive UI's 
   
    AJAX -> Asynchronous Javascript(callbacks) and XML
	
	AJAX is not a programming language its a programming concept 
	
	-> using callbacks,promises , async/await we can achieve asynchronous way of programming
	-> Application Programming Interface 
	
	-> Reads data from a web server after the page has been loaded
	-> Updates the page(part of element) without reloading the page
	-> sends the data to web server in background
	
	Approach 1: XMLHttpRequest Object to make Ajax Call . XMLHttpRequest ()
	
	Approach 2: We will use jQuery to make an Ajax callbacks
	
	Aproach 3: fetch() API which is used to make flexible structure 
	
	https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX
	
	===============================================================================
	
	Libraries provide predefined functions and classes to make work easier
	
	Framework is a foundation upon which developers can build application

    Create React Application

    2 ways -> 1) using cdn
              2) using npx 	
			  
	Visual Studio Code
	Live Server
	Script Enable (VS Code ES7 React/Redux/React-Native/JS snippets)
	
	<html>
		<head>
		</head>
		<body>
		    <h1>  Welcome <h1>
		</body>
		</html>
		
	
	JSX => Javascript XML 
	
	JSX allows us to write HTML in React
	
	<h1> Welcome to JSX </h1> ;
	
	props => <button type="button" disabled=true color="black"></button>
	
	https://react-md.dev/migration-guides/v4-to-v5
	
	 React  
	 React DOM 
	 ReactDOM.render()
	 Javascript -> Create Element
	 CDN Html => first way
	 JSX 
	 const a = <h1>Welcome </h1>;
	 
	 Component => Header (should start with capital letter)
	 
	 pass props(dept) to function Header => should not attempt to change the props 
                         Pure Functions 	
     
	 npx create-react-app sampleapp
     						 
	 Install Bootstrap 
	
	  Bootstrap => CDN 
	 
	  React Bootstrap => as a task 
	  
	  https://reactjs.org/docs/state-and-lifecycle.html
	  
	   3 ways
  
      1. <> </>
      2. <Fragment> = Named Export 
      3. <React.Fragment>
	  
	  Default and Named Export 
	  
	  React
	  
	  export const Fragment={}
	  
	  export default React ;
	  
	  React Props
	  ======================================================
	  
	  props can be used to pass data from parent to child component
	  
	  attributes to components 
	  
	  1. Props can be destructuring for easy usage 
	  
	     destructuring of object in react-app
		 
		 const userData = {name:"Kumar",age:50}
		 
		 const {name,age} = userData;
		 
	   2. Props can have default values (default Parent will be taken ,if Parent is not specified child will be taken)
	   3. Props will take default value as true if no value is passed 
	   4. Passing objects as props, Spread Operator 
	   
	   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

       =====================================================================================

       Conditional Rendering
	   
	   Based on Some Condition we want to show our content or not

       1. Show or Hide Component
       2. Implementing the Role Based Permission Level(End User , Agents ,Admin)
       3. Toggling Functionalities 

       Task : age>18 <DrivingLicense/> 
	   
	  {props.age>18 && <EligibleForDrivingLicense/>}
	  
	  const value = true && "license"; // license 
	  
	  true && true => true 
	  true && false => false
	  false && true => false
	  false && false => false 
	  
	  =================================================================
	  
	  React Events 
	  
	  <button onclick='onButtonClick()'>Click me </button>
	  
	  <script>
	  function onButtonClick(){
	     console.log("Button is clicked");
	  }
	  </script>
	  
	  JSX
	  <button onClick={onButtonClick}> Click Me </button>
	  
	  State Concept
	  
	  1. Create the Object and initiliase
	  
	  2. Access the State decalared
	  
	  3. Modify the State
	  
	  State => Moving , Updated , Freezed, Changed , Rejected 
	  
	  ===================================================================
	  
	  Connecting React to Express
	  
	  1. npm install mongoose
	  2. give database url
	  3. create connection 
	  4. define model(schema)
	  
	  React 
	  npx create-react-app client
	  
	  Express
	  npx express-generator api
	  
	  Modify the Port Number : 2 options 
	  
	  1. modify the port number for express-generator
	  2. modify the port number for react
	  
	  => Goto api folder => bin => open www file 15th line number change the port number to 3002
	  
	  React => Package.json
		"start": "set PORT=3003 && react-scripts start",
		
	  Mistakes usually we do
	  1. Once the router is created , we need to register in app.js
	  2. CORS issue
	     npm install cors
		 import it in app.js file
		 register it in app.js
		 
	=========================================================================
	
	  fetch vs axios
	  
	  fetch is a browser api 
	  axios is third party library 
	  npm install axios 
	  
	   fetch('http://localhost:3002/students') //pass url
            .then(response => response.json())  // Conversion
            .then(data => setContent(data));  //setting the data 
            
	   in axios we will be avoiding one of the condition
	   
	   axios.get('http://localhost:3002/students')
	       .then(response => setContent(response)); //explicit conversion 
		   
	   in axios explicit conversion happens in fetch there is no conversion
	   
	   2 differences
	   
	   1. while receiving the data
	   2. while sending the data 
	   
	   formData = {name:"savitha",age:23,dob:'08/09/1991'}
	   fetch(url,{
	         method:"POST"
	         body : JSON.stringify(formData) //conversion
	   }
	   
	   axios({
	        url:"",
	        method:"POST",
			data : formData // no conversion
	   })
	   
	   ======================================================================
	   
	   React Hooks
	   
	   Functional Components 
	        => one way (props)
			
	   Class Components 
	        => state-and-lifecycle
			
	   React Life cycle methods
	   Mounting => While Rendering the Component
	   
	   componentDidMount(){
	     //mount
	   }
	   Updating => State updated 
	   componentDidUpdate(){
	     //update
	   }
	   
	   UnMounting => Remove the Component from dom 
	   
	   componentWillUnmount(){
	     //removal 
	   }
	  
	  
	   Disadv : messing the code btw the lifecycle methods 
	   
	   making the function dynamic through hooks 
	   
	   Hooks are nothing but functions that let you "hook into " React features(state and 
	   
	   lifecycle methods) in Functional Component 
	   
	   Hooks was introduced in 16.8 versions
	   
	   const [count,setCount] = useState();
	   
	   useEffect hook 
	   Life cycle methods we are using this hook
	   
	   componentDidMount(){
	     //mount
		 useEffect(() => {
	   
	   })
	   }
	   
	   
	   Updating => State updated 
	   componentDidUpdate(){
	     //update
		   useEffect(() => {
             console.log("on update phase");
         },[count]);
	   }
	   
	   UnMounting => Remove the Component from dom 
	   
	   componentWillUnmount(){
	     //removal 
	   }

       React Routing 
	   
	   Routing(redirect) to particular component based on the user requirement
	   we are not refreshing the page only re-rendering the component 
	   
	   install third party library called
	   react-router-dom 
	   
	   import {BrowserRouter , Routes , Route } from "react-router-dom";
	   
	   <BrowserRouter>
	   
	   we need to wrap our app with Browser Router so that our application ensures for
	   routing
	   
	   Routes is a parent which holds all the router
	   Route is a children of Routes , we can have 'n' Route 
	   
	   ==================================================================
	   
	   React Styling
	   
	   <div class="App"> <!-- HTML -- >
	   <div className = "App"> <!--  React -->
	   
	   Html
	   <div style="background-color:red,color:white">
	   
	   JS
	   <div style={{backgroundColor:"red",color:"white"}}
	   
	   1. Internal Styling
	   2. Styled Components 
	       third party library (npm install styled-components) 
	   3. CSS modules 
	   4. External Style Sheets (import './header.css')
	   
	   
	  
	   Full Stack Developer Role 
	   
  	   1. UI/UX figma or adobe tools
	   2. understand business workflow
	   3. Dont assume anything 
	   4. expected input and output 
	   5. which tools we need to use 
	   6. performance app
	   7. Code Review and refactoring code 
   